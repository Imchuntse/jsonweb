{"version":3,"sources":["../../src/langs/core.ts"],"names":["isIdentifier","node","name","t","undefined","Array","isArray","includes","sideEffects","callee","isMemberExpression","property","state","graph","addEdge","arguments","getCallee","isSequenceExpression","expressions","length","first","second","isNumericLiteral","value","getAffectedNodes","isCallExpression","object","obj","scope","getDeclaration","ScopeManager","globalExportsIdentifier","isStringLiteral","addExport","visitors","Function","unsubscribe","onVisit","descendant","baseVisit","body","params","forEach","param","isFunctionExpression","id","Block","isProgram","exportsDeclaration","directives","directive","Directive","TryStatement","handler","finalizer","statement","block","IfStatement","consequent","test","WhileStatement","SwitchCase","SwitchStatement","cases","c","discriminant","ForStatement","init","update","child","ForInStatement","left","right","Terminatorless","isBreakStatement","isContinueStatement","argument","closestFunctionNode","fnStack","ObjectExpression","context","push","properties","prop","isObjectMethod","key","isObjectProperty","isSpreadElement","pop","MemberExpression","declaration","importAliases","has","source","get","imports","AssignmentExpression","visit","VariableDeclarator","declared","meta","set","unregister","addDeclareHandler","identifier","from","delete","VariableDeclaration","kind","declarations","CallExpression","parent","scopeId","whereIsDeclared","firstArg","local","_imported","startsWith","importTypes","conditions","callback","affectedNode","SequenceExpression","identifierHandlers","declare","keep","refer"],"mappings":"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","sourcesContent":["import { types as t } from '@babel/core';\nimport type {\n  AssignmentExpression,\n  Block,\n  CallExpression,\n  Directive,\n  ForInStatement,\n  ForStatement,\n  Function,\n  Identifier,\n  IfStatement,\n  MemberExpression,\n  Node,\n  ObjectExpression,\n  SequenceExpression,\n  SwitchCase,\n  SwitchStatement,\n  Terminatorless,\n  TryStatement,\n  VariableDeclaration,\n  VariableDeclarator,\n  WhileStatement,\n} from '@babel/types';\n\nimport { peek } from '@linaria/babel-preset';\nimport type { IdentifierHandlers, Visitors } from '../types';\nimport GraphBuilderState from '../GraphBuilderState';\nimport ScopeManager from '../scope';\n\nfunction isIdentifier(\n  node: Node,\n  name?: string | string[]\n): node is Identifier {\n  return (\n    t.isIdentifier(node) &&\n    (name === undefined ||\n      (Array.isArray(name) ? name.includes(node.name) : node.name === name))\n  );\n}\n\ntype SideEffect = [\n  {\n    callee?: (child: CallExpression['callee']) => boolean;\n    arguments?: (child: CallExpression['arguments']) => boolean;\n  },\n  (node: CallExpression, state: GraphBuilderState) => void\n];\n\nconst sideEffects: SideEffect[] = [\n  [\n    // if the first argument of forEach is required, mark forEach as required\n    {\n      callee: (node) =>\n        t.isMemberExpression(node) &&\n        t.isIdentifier(node.property) &&\n        node.property.name === 'forEach',\n    },\n    (node, state) => state.graph.addEdge(node.arguments[0], node),\n  ],\n];\n\nfunction getCallee(node: CallExpression): Node {\n  if (\n    t.isSequenceExpression(node.callee) &&\n    node.callee.expressions.length === 2\n  ) {\n    const [first, second] = node.callee.expressions;\n    if (t.isNumericLiteral(first) && first.value === 0) {\n      return second;\n    }\n  }\n\n  return node.callee;\n}\n\n/*\n * Returns nodes which are implicitly affected by specified node\n */\nfunction getAffectedNodes(node: Node, state: GraphBuilderState): Node[] {\n  // FIXME: this method should be generalized\n  const callee = t.isCallExpression(node) ? getCallee(node) : null;\n  if (\n    t.isCallExpression(node) &&\n    t.isMemberExpression(callee) &&\n    isIdentifier(callee.object, 'Object') &&\n    isIdentifier(callee.property, [\n      'assign',\n      'defineProperty',\n      'defineProperties',\n      'freeze',\n      'observe',\n    ])\n  ) {\n    const [obj, property] = node.arguments;\n    if (!t.isIdentifier(obj)) {\n      return [];\n    }\n\n    if (\n      state.scope.getDeclaration(obj) !== ScopeManager.globalExportsIdentifier\n    ) {\n      return [node.arguments[0]];\n    }\n\n    if (t.isStringLiteral(property)) {\n      if (property.value === '__esModule') {\n        return [node.arguments[0]];\n      }\n\n      state.graph.addExport(property.value, node);\n    }\n  }\n\n  return [];\n}\n\nexport const visitors: Visitors = {\n  /*\n   * FunctionDeclaration | FunctionExpression | ObjectMethod | ArrowFunctionExpression | ClassMethod | ClassPrivateMethod;\n   * Functions can be either a statement or an expression.\n   * That's why we need to disable default dependency resolving strategy for expressions by passing `ignoreDeps` flag.\n   * Every function must have a body. Without a body, it becomes invalid.\n   * In general, a body depends on parameters of a function.\n   * In real life, some of the parameters can be omitted, but it's not trivial to implement that type of tree shaking.\n   */\n  Function(this: GraphBuilderState, node: Function) {\n    const unsubscribe = this.onVisit((descendant) =>\n      this.graph.addEdge(node, descendant)\n    );\n    this.baseVisit(node, true); // ignoreDeps=true prevents default dependency resolving\n    unsubscribe();\n\n    this.graph.addEdge(node, node.body);\n\n    node.params.forEach((param) => this.graph.addEdge(node.body, param));\n    if (\n      t.isFunctionExpression(node) &&\n      node.id !== null &&\n      node.id !== undefined\n    ) {\n      // keep function name in expressions like `const a = function a();`\n      this.graph.addEdge(node, node.id);\n    }\n  },\n\n  /*\n   * BlockStatement | Program\n   * The same situation as in ExpressionStatement: if one of the expressions is required, the block itself is also required.\n   * Whereas a block doesn't depend on its children.\n   * Example:\n   * 1. let c;\n   * 2. { // BlockStatement begin\n   * 3.   let a = 1;\n   * 4.   let b = 2;\n   * 5.   a++;\n   * 6.   a = c;\n   * 7. } // BlockStatement end\n   *\n   * If we want to evaluate the value of `c`, we need to evaluate lines 1, 3, 5 and 6,\n   * but we don't need line 4, even though it's a child of the block.\n   */\n  Block(this: GraphBuilderState, node: Block) {\n    this.baseVisit(node);\n\n    if (t.isProgram(node)) {\n      const exportsDeclaration = this.scope.getDeclaration('global:exports')!;\n      this.graph.addEdge(node, exportsDeclaration);\n      node.directives.forEach((directive) =>\n        this.graph.addEdge(node, directive)\n      );\n    }\n  },\n\n  Directive(this: GraphBuilderState, node: Directive) {\n    this.baseVisit(node);\n    this.graph.addEdge(node, node.value);\n  },\n\n  /*\n   * TryStatement\n   * try { /* block *\\/ } catch() {/* handler *\\/} finalize {/* finalizer *\\/}\n   * `handler` and `finalizer` do not make sense without `block`\n   * `block` depends on the whole node.\n   */\n  TryStatement(this: GraphBuilderState, node: TryStatement) {\n    this.baseVisit(node);\n    [node.handler, node.finalizer].forEach((statement) => {\n      if (statement) {\n        this.graph.addEdge(node.block, statement);\n        this.graph.addEdge(statement, node.block);\n      }\n    });\n  },\n\n  IfStatement(this: GraphBuilderState, node: IfStatement) {\n    this.baseVisit(node);\n    this.graph.addEdge(node, node.consequent);\n    this.graph.addEdge(node, node.test);\n  },\n\n  /*\n   * WhileStatement\n   * Pretty simple behaviour here:\n   * • if body is required, the statement is required\n   * • if the statement is required, the condition is also required.\n   */\n  WhileStatement(this: GraphBuilderState, node: WhileStatement) {\n    this.baseVisit(node);\n    this.graph.addEdge(node, node.test);\n  },\n\n  SwitchCase(this: GraphBuilderState, node: SwitchCase) {\n    this.baseVisit(node);\n    node.consequent.forEach((statement) => this.graph.addEdge(statement, node));\n    if (node.test) {\n      this.graph.addEdge(node, node.test);\n    }\n  },\n\n  SwitchStatement(this: GraphBuilderState, node: SwitchStatement) {\n    this.baseVisit(node);\n    node.cases.forEach((c) => this.graph.addEdge(c, node));\n    this.graph.addEdge(node, node.discriminant);\n  },\n\n  ForStatement(this: GraphBuilderState, node: ForStatement) {\n    this.baseVisit(node);\n\n    [node.init, node.test, node.update, node.body].forEach((child) => {\n      if (child) {\n        this.graph.addEdge(node, child);\n      }\n    });\n  },\n\n  /*\n   * ForInStatement\n   * for (const k in o) { body }\n   */\n  ForInStatement(this: GraphBuilderState, node: ForInStatement) {\n    this.baseVisit(node);\n\n    if (node.body) {\n      this.graph.addEdge(node, node.body);\n      this.graph.addEdge(node.body, node.left);\n    }\n\n    this.graph.addEdge(node.left, node.right);\n  },\n\n  /*\n   * BreakStatement | ContinueStatement | ReturnStatement | ThrowStatement | YieldExpression | AwaitExpression\n   * All these nodes are required to evaluate the value of a function in which they are defined.\n   * Also, the value of these nodes depends on the argument if it is presented.\n   */\n  Terminatorless(this: GraphBuilderState, node: Terminatorless) {\n    this.baseVisit(node);\n\n    if (\n      !(t.isBreakStatement(node) || t.isContinueStatement(node)) &&\n      node.argument\n    ) {\n      this.graph.addEdge(node, node.argument);\n    }\n\n    const closestFunctionNode = peek(this.fnStack);\n    this.graph.addEdge(closestFunctionNode, node);\n  },\n\n  /*\n   * ObjectExpression\n   * Objects are… complicated. Especially because similarly looking code can be either an expression or a pattern.\n   * In this case we work with an expression like:\n   * const obj = {\n   *   method() {}, // ObjectMethod\n   *   property: \"value\", // ObjectProperty\n   *   ...rest, // SpreadElement\n   * }\n   */\n  ObjectExpression(this: GraphBuilderState, node: ObjectExpression) {\n    this.context.push('expression');\n    this.baseVisit(node);\n    node.properties.forEach((prop) => {\n      this.graph.addEdge(node, prop);\n      if (t.isObjectMethod(prop)) {\n        this.graph.addEdge(prop, prop.key);\n        this.graph.addEdge(prop, prop.body);\n      } else if (t.isObjectProperty(prop)) {\n        this.graph.addEdge(prop, prop.key);\n        this.graph.addEdge(prop, prop.value);\n      } else if (t.isSpreadElement(prop)) {\n        this.graph.addEdge(prop, prop.argument);\n      }\n    });\n    this.context.pop();\n  },\n\n  /*\n   * MemberExpression\n   * It's about a simple expression like `obj.foo` or `obj['foo']`.\n   * In addition to default behaviour (an expression depends on all its children),\n   * we add a backward dependency from an object to a node for processing member\n   * expressions in assignments.\n   *\n   * Example:\n   * let obj = { a: 1 };\n   * obj.b = 2;\n   *\n   * If we try to evaluate `obj` without backward dependency,\n   * `obj.b = 2` will be cut and we will get just `{ a: 1 }`.\n   */\n  MemberExpression(this: GraphBuilderState, node: MemberExpression) {\n    this.baseVisit(node);\n\n    if (t.isIdentifier(node.object) && t.isIdentifier(node.property)) {\n      // It's simple `foo.bar` expression. Is it a usage of a required library?\n      const declaration = this.scope.getDeclaration(node.object);\n      if (declaration && this.graph.importAliases.has(declaration)) {\n        // It is. We can remember what exactly we use from it.\n        const source = this.graph.importAliases.get(declaration)!;\n        this.graph.imports.get(source)!.push(node.property);\n      }\n    }\n  },\n\n  /*\n   * AssignmentExpression\n   * `a = b`, `{ ...rest } = obj`, `obj.a = 3`, etc.\n   * It's not a declaration, it's just an assignment, but it affects\n   * the value of declared variable if the variable it mentioned in the left part.\n   * So, we apply some context-magic here in order to catch reference of variables in the left part.\n   * We switch the context to `lval` and continue traversing through the left branch.\n   * If we then meet some identifier, we mark it as a dependency of its declaration.\n   */\n  AssignmentExpression(this: GraphBuilderState, node: AssignmentExpression) {\n    this.context.push('lval');\n    this.visit<AssignmentExpression['left'], AssignmentExpression>(\n      node.left,\n      node,\n      'left'\n    );\n    this.context.pop();\n\n    this.visit(node.right, node, 'right');\n\n    // The value of an expression depends on the left part.\n    this.graph.addEdge(node, node.left);\n\n    // The left part of an assignment depends on the right part.\n    this.graph.addEdge(node.left, node.right);\n  },\n\n  /*\n   * VariableDeclarator\n   * It would be pretty simple if it weren't used to declare variables from other modules.\n   */\n  VariableDeclarator(this: GraphBuilderState, node: VariableDeclarator) {\n    /*\n     * declared is used for detecting external dependencies in cases like\n     * const { a, b, c } = require('module');\n     *\n     * We are remembering all declared variables in order to use it later in CallExpression visitor\n     */\n    const declared: Array<[Identifier, Identifier | null]> = [];\n    this.meta.set('declared', declared);\n    const unregister = this.scope.addDeclareHandler((identifier, from) =>\n      declared.push([identifier, from])\n    );\n    this.baseVisit(node);\n    this.meta.delete('declared');\n    unregister();\n\n    if (node.init) {\n      // If there is an initialization part, the identifier depends on it.\n      this.graph.addEdge(node.id, node.init);\n    }\n\n    // If a statement is required itself, an id is also required\n    this.graph.addEdge(node, node.id);\n  },\n\n  /*\n   * VariableDeclaration\n   * It's just a wrapper for group of VariableDeclarator.\n   * If one of the declarators is required, the wrapper itself is also required.\n   */\n  VariableDeclaration(this: GraphBuilderState, node: VariableDeclaration) {\n    this.meta.set('kind-of-declaration', node.kind);\n    this.baseVisit(node);\n    node.declarations.forEach((declaration) =>\n      this.graph.addEdge(declaration, node)\n    );\n    this.meta.delete('kind-of-declaration');\n  },\n\n  /*\n   * CallExpression\n   * Do you remember that we have already mentioned it in VariableDeclarator?\n   * It is a simple expression with default behaviour unless it is a `require`.\n   *\n   * Another tricky use case here is functions with side effects (e.g. `Object.defineProperty`).\n   */\n  CallExpression(\n    this: GraphBuilderState,\n    node: CallExpression,\n    parent: Node | null\n  ) {\n    this.baseVisit(node);\n\n    if (t.isIdentifier(node.callee) && node.callee.name === 'require') {\n      // It looks like a module import …\n      const scopeId = this.scope.whereIsDeclared(node.callee);\n      if (scopeId && scopeId !== 'global') {\n        // … but it is just a user defined function\n        return;\n      }\n\n      const [firstArg] = node.arguments;\n      if (!t.isStringLiteral(firstArg)) {\n        // dynamic import? Maybe someday we can do something about it\n        return;\n      }\n\n      const { value: source } = firstArg;\n      const declared = this.meta.get('declared') as Array<\n        [Identifier, Identifier | null]\n      >;\n      if (!declared) {\n        // This is a standalone `require`\n        return;\n      }\n\n      // Define all declared variables as external dependencies.\n      declared.forEach(([local, _imported]) =>\n        // FIXME: var slugify = require('../slugify').default;\n        {\n          if (!this.graph.imports.has(source)) {\n            this.graph.imports.set(source, []);\n          }\n\n          if (\n            parent &&\n            t.isMemberExpression(parent) &&\n            t.isIdentifier(parent.property)\n          ) {\n            // An imported function is specified right here.\n            // eg. require('../slugify').default\n            this.graph.imports.get(source)!.push(parent.property);\n          } else {\n            if (\n              t.isCallExpression(parent) &&\n              t.isIdentifier(parent.callee) &&\n              typeof parent.callee.name === 'string'\n            ) {\n              if (parent.callee.name.startsWith('_interopRequireDefault')) {\n                this.graph.importTypes.set(source, 'default');\n              } else if (\n                parent.callee.name.startsWith('_interopRequireWildcard')\n              ) {\n                this.graph.importTypes.set(source, 'wildcard');\n              } else {\n                // What I've missed?\n              }\n            }\n\n            // The whole namespace was imported. We will know later, what exactly we need.\n            // eg. const slugify = require('../slugify');\n            this.graph.importAliases.set(local, source);\n          }\n        }\n      );\n\n      return;\n    }\n\n    sideEffects.forEach(([conditions, callback]) => {\n      if (\n        (conditions.callee && !conditions.callee(node.callee)) ||\n        (conditions.arguments && !conditions.arguments(node.arguments))\n      ) {\n        return;\n      }\n\n      return callback(node, this);\n    });\n\n    getAffectedNodes(node, this).forEach((affectedNode) => {\n      this.graph.addEdge(affectedNode, node);\n      if (t.isIdentifier(affectedNode)) {\n        this.graph.addEdge(\n          this.scope.getDeclaration(affectedNode)!,\n          affectedNode\n        );\n      }\n    });\n  },\n\n  /*\n   * SequenceExpression\n   * It is a special case of expression in which the value of the whole\n   * expression depends only on the last subexpression in the list.\n   * The rest of the subexpressions can be omitted if they don't have dependent nodes.\n   *\n   * Example:\n   * const a = (1, 2, b = 3, 4, b + 2); // `a` will be equal 5\n   */\n  SequenceExpression(this: GraphBuilderState, node: SequenceExpression) {\n    // Sequence value depends on only last expression in the list\n    this.baseVisit(node, true);\n    if (node.expressions.length > 0) {\n      this.graph.addEdge(node, node.expressions[node.expressions.length - 1]);\n    }\n  },\n};\n\nexport const identifierHandlers: IdentifierHandlers = {\n  declare: [\n    ['CatchClause', 'param'],\n    ['Function', 'params'],\n    ['FunctionExpression', 'id'],\n    ['RestElement', 'argument'],\n    ['ThrowStatement', 'argument'],\n    ['VariableDeclarator', 'id'],\n  ],\n  keep: [['ObjectProperty', 'key']],\n  refer: [\n    ['ArrayExpression', 'elements'],\n    ['AssignmentExpression', 'left', 'right'],\n    ['BinaryExpression', 'left', 'right'],\n    ['CallExpression', 'arguments', 'callee'],\n    ['ConditionalExpression', 'test', 'consequent', 'alternate'],\n    ['ForInStatement', 'right'],\n    ['Function', 'body'],\n    ['IfStatement', 'test'],\n    ['LogicalExpression', 'left', 'right'],\n    ['NewExpression', 'arguments', 'callee'],\n    ['ObjectProperty', 'value'],\n    ['ReturnStatement', 'argument'],\n    ['SequenceExpression', 'expressions'],\n    ['SwitchStatement', 'discriminant'],\n    ['UnaryExpression', 'argument'],\n    ['UpdateExpression', 'argument'],\n    ['VariableDeclarator', 'init'],\n  ],\n};\n"],"file":"core.js"}